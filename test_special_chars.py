import spacy
import logging
from typing import List, Tuple

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_special_chars() -> List[Tuple[str, List[Tuple[str, str]]]]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ NER
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –∏—Ö —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    nlp = spacy.load("ru_core_news_md")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_cases = [
        # –≠–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        "‚ö°Ô∏è–°–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "üì±iPhone 13 Pro Max",
        "üéÆPlayStation 5",
        "üíªMacBook Pro",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        "C++ Programming Language",
        "Python 3.9",
        "JavaScript (JS)",
        "HTML & CSS",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö
        "Mr. & Mrs. Smith",
        "Dr. Jekyll",
        "O'Connor",
        "Jean-Pierre",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞—Ç–∞—Ö
        "01/01/2023",
        "2023-12-31",
        "31.12.2023",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∞–¥—Ä–µ—Å–∞—Ö
        "123 Main St., Apt. 4B",
        "P.O. Box 12345",
        "Suite #100",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
        "Apple Inc.",
        "Microsoft Corp.",
        "Google LLC",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
        "iPhone¬Æ",
        "Windows‚Ñ¢",
        "MacOS¬Æ",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤–∞–ª—é—Ç–∞—Ö
        "$100.00",
        "‚Ç¨50.00",
        "¬£75.00",
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–±—ã—Ç–∏—è—Ö
        "World Cup 2022‚Ñ¢",
        "Olympic Games¬Æ",
        "Super Bowl¬Æ",
        "gemini-2.5 –≤—ã–ø—É—Å—Ç–∏–ª–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É"
    ]
    
    results = []
    for text in test_cases:
        doc = nlp(text)
        entities = []
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        for ent in doc.ents:
            entities.append((ent.text, ent.label_))
        
        results.append((text, entities))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info(f"\n–¢–µ–∫—Å—Ç: {text}")
        logger.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
        for entity in entities:
            logger.info(f"  - {entity[0]} ({entity[1]})")
    
    return results

def analyze_results(results: List[Tuple[str, List[Tuple[str, str]]]]) -> None:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.info("\n=== –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===")
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_cases = len(results)
    cases_with_entities = sum(1 for _, entities in results if entities)
    total_entities = sum(len(entities) for _, entities in results)
    
    logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: {total_cases}")
    logger.info(f"–°–ª—É—á–∞–µ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏: {cases_with_entities}")
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {total_entities}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
    entity_types = {}
    for _, entities in results:
        for _, entity_type in entities:
            entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
    
    logger.info("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π:")
    for entity_type, count in sorted(entity_types.items(), key=lambda x: x[1], reverse=True):
        logger.info(f"  {entity_type}: {count}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    logger.info("\n–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ (–±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π):")
    for text, entities in results:
        if not entities:
            logger.info(f"  - {text}")

if __name__ == "__main__":
    results = test_special_chars()
    analyze_results(results) 
